# This is a Snakemake file.

import yaml
import os

static_files = [os.path.join(dirpath, name)
                for (dirpath, _, filenames) in os.walk('docs/_static')
                for name in filenames]

# load populations definitions
with open('docs/_static/data/populations.yml', mode='r') as f:
    populations = yaml.load(f)
    pop_ids = [p['id'] for p in populations]

# analyse whole chromosomes
chromosomes = ['2', '3', 'X']


rule build_signal_pages:
    input:
        "docs/_static/data/signals.csv",
        "scripts/build_signal_pages.py",
        "templates/signal.rst",
    output:
        touch("docs/signal/.make"),
    shell:
        "python scripts/build_signal_pages.py"


rule build_signals_page:
    input:
        "docs/_static/data/signals.csv",
        "scripts/build_signals_page.py",
        "templates/signals.rst",
    output:
        "docs/signals.rst",
    shell:
        "python scripts/build_signals_page.py"


rule build_population_pages:
    input:
        "docs/_static/data/signals.csv",
        "scripts/build_population_pages.py",
        "templates/populations.rst",
        "templates/population.rst",
    output:
        "docs/populations.rst",
        expand("docs/population/{population}.rst", population=pop_ids),
    shell:
        "python scripts/build_population_pages.py"


rule build_gene_pages:
    input:
        "docs/_static/data/signals.csv",
        "scripts/build_gene_pages.py",
        "templates/gene.rst",
    output:
        touch("docs/gene/.make"),
    shell:
        "python scripts/build_gene_pages.py"


rule all:
    input:
        static_files,
        rules.build_signal_pages.output,
        rules.build_signals_page.output,
        rules.build_population_pages.output,
        rules.build_gene_pages.output,
    shell:
        "cd docs && make html && rsync -rvult --progress --delete _build/html/ ../../agam-selection-atlas-gh-pages/dev/"
